Le r√¥le des boucles est de r√©p√©ter un certain nombre de fois les m√™mes op√©rations.
Tous les programmes, ou presque, ont besoin de ce type de fonctionnalit√©.

La boucle while
D√©cortiquons pr√©cis√©ment ce qui se passe dans une boucle. Pour ce faire, nous allons
voir comment elle se construit.
Une boucle commence par une d√©claration : ici while. Cela veut dire, √† peu de chose
pr√®s,  tant que . Puis nous avons une condition : c'est elle qui permet √† la boucle
de s'arr√™ter. Une boucle n'est utile que lorsque nous pouvons la contr√¥ler, et donc
lui faire r√©p√©ter une instruction un certain nombre de fois. C'est √† √ßa que servent les
conditions. Ensuite nous avons une ou plusieurs instructions : c'est ce que va r√©p√©ter
notre boucle 1
!
while (/* Condition */)
{
//Instructions √† r√©p√©ter
}

La boucle do... while
Puisque je viens de vous expliquer comment fonctionne une boucle while, je ne vais
pas vraiment m'attarder sur la boucle do... while. En eet, ces deux boucles ne sont
pas cousines, mais plut√¥t s√∑urs. Leur fonctionnement est identique √† deux d√©tails pr√®s.
do{
//blablablablablablablabla
}while(a < b);


La boucle for
Cette boucle est un peu particuli√®re puisqu'elle prend tous ses attributs dans sa condition et agit en cons√©quence. Je m'explique : jusqu'ici, nous avions fait des boucles
avec :
 d√©claration d'une variable avant la boucle ;
 initialisation de cette variable ;
 incr√©mentation de celle-ci dans la boucle.
Eh bien on met tout √ßa dans la condition de la boucle for 3
, et c'est tout. Mais je sais
bien qu'un long discours ne vaut pas un exemple, alors voici une boucle for sous vos
yeux √©bahis :
for(int i = 1; i <= 10; i++)
{
System.out.println("Voici la ligne "+i);
}
