 La g√©n√©ricit√© est un concept tr√®s utile pour d√©velopper des objets travaillant avec
plusieurs types de donn√©es.
 Vous passerez donc moins de temps √† d√©velopper des classes traitant de fa√ßon identique des donn√©es di√©rentes.
 La g√©n√©ricit√© permet de r√©utiliser sans risque le polymorphisme avec les collections.
 Cela conf√®re plus de robustesse √† votre code.
 Vous pouvez coupler les collections avec la g√©n√©ricit√© !
 Le wildcard (?) permet d'indiquer que n'importe quel type peut √™tre trait√© et donc
accept√© !
 D√®s que le wildcard (?) est utilis√©, cela revient √† rendre ladite collection en lecture
seule !
 Vous pouvez √©largir le champ d'acceptation d'une collection g√©n√©rique gr√¢ce au motcl√© extends.
 L'instruction ? extends MaClasse autorise toutes les collections de classes ayant
pour supertype MaClasse.
 L'instruction ? super MaClasse autorise toutes les collections de classes ayant pour
type MaClasse et tous ses supertypes !
 Pour ce genre de cas, les m√©thodes g√©n√©riques sont particuli√®rement adapt√©es et
permettent d'utiliser le polymorphisme dans toute sa splendeur !