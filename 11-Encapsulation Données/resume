Le principe d'encapsulation
Voil√†, vous venez de construire votre premier objet  maison . Cependant, sans le savoir, vous avez fait plus que √ßa : vous avez cr√©√© un objet dont les variables sont prot√©g√©es
de l'ext√©rieur. En eet, depuis l'ext√©rieur de la classe, elles ne sont accessibles que via
les accesseurs et mutateurs que nous avons d√©ni. C'est le principe d'encapsulation !
En fait, lorsqu'on proc√®de de la sorte, on s'assure que le fonctionnement interne √†
l'objet est int√®gre, car toute modication d'une donn√©e de l'objet est ma√Ætris√©e. Nous
avons d√©velopp√© des m√©thodes qui s'assurent qu'on ne modie pas n'importe comment
les variables.
Prenons l'exemple de la variable nbreHabitants. L'encapsuler nous permet, lors de son
aectation, de d√©duire automatiquement la cat√©gorie de l'objet Ville, chose qui n'est
pas facilement faisable sans encapsulation. Par extension, si vous avez besoin d'eectuer
des op√©rations d√©termin√©es lors de l'aectation du nom d'une ville par exemple, vous
n'aurez pas √† passer en revue tous les codes source utilisant l'objet Ville : vous n'aurez
qu'√† modier l'objet (ou la m√©thode) en question, et le tour sera jou√©.
Si vous vous demandez l'utilit√© de tout cela, dites-vous que vous ne serez peut-√™tre
pas seuls √† d√©velopper vos logiciels, et que les personnes utilisant vos classes n'ont pas